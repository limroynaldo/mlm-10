package org.rdo.process;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;

import org.compiere.model.MBPartner;
import org.compiere.process.ProcessInfoParameter;
import org.compiere.process.SvrProcess;
import org.compiere.util.DB;
import org.compiere.util.Env;
import org.rdo.model.X_RDO_Commission;
import org.rdo.model.X_RDO_CommissionAmt;
import org.rdo.model.X_RDO_CommissionDetail;

public class RDOCommissionRun extends SvrProcess {
	/**	Client to be imported to		*/
	private int				m_AD_Client_ID = 0;
	/**	Organization to be imported to		*/
	private int				m_AD_Org_ID = 0;
	/**	Date From and Date To		*/
	private Timestamp		p_DateFrom;
	private Timestamp		p_DateTo;
	
	private int 				p_BP_Group_ID_Team=1000005;
	
	private int				p_M_Product_Category_ID = 0;
	
	private int				p_maxlevel = 10;
	
	@Override
	protected void prepare() {
		ProcessInfoParameter[] para = getParameter();
		for (int i = 0; i < para.length; i++)
		{
			String name = para[i].getParameterName();
			if (name.equals("AD_Client_ID"))
				m_AD_Client_ID = ((BigDecimal)para[i].getParameter()).intValue();
			else if (name.equals("AD_Org_ID"))
				m_AD_Org_ID = ((BigDecimal)para[i].getParameter()).intValue();
			else if (name.equals("DateOrdered")) {
				p_DateFrom = (Timestamp)para[i].getParameterAsTimestamp();
				p_DateTo = (Timestamp)para[i].getParameter_ToAsTimestamp();
			}
			else if (name.equals("M_Product_Category_ID"))
				p_M_Product_Category_ID =  ((BigDecimal)para[i].getParameter()).intValue();
			else if (name.equals("MaxLevel"))
				p_maxlevel = para[i].getParameterAsInt();
		}		
	}

	@Override
	protected String doIt() throws Exception {
		String msg = "";
		
		StringBuffer sql = new StringBuffer();
		sql.append("select C_Order_ID, C_OrderLine_ID, C_BPartner_ID, BPartnerValue, BPartnerName, Ref_BPartner_ID, RefBPartnerValue, RefBPartnerName, ")
			.append("M_Product_ID, ProductValue, DateOrdered, M_PriceList_ID, PriceActual, C_Tax_ID, Rate, M_Product_Category_ID, ProductCategoryValue, ")
			.append("IsUpgrade, Ref_Order_ID ")
			.append("from RDO_Order_V ")
			.append("where DateOrdered >=? ")
			.append("and DateOrdered <=? ")
			.append("and IsCommission='Y' ");
		// Temporarily Remarked
		//sql.append("and DocStatus='CO' ");
		//sql.append("and DocumentNo='80189' ");
		sql.append("and M_Product_Category_ID=? ");
		sql.append("order by DateOrdered asc, C_Order_ID asc");
		
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		X_RDO_Commission comm = new X_RDO_Commission(getCtx(), 0, get_TrxName());;
		int RDO_Commission_ID = 0;
		try {
			pstmt = DB.prepareStatement(sql.toString(), get_TrxName());
			pstmt.setTimestamp(1, p_DateFrom);
			pstmt.setTimestamp(2, p_DateTo);
			pstmt.setInt(3, p_M_Product_Category_ID);
			rs = pstmt.executeQuery();
			int idxcount = 1;
			while (rs.next()) {
				StringBuffer sqlLevel = new StringBuffer();
				sqlLevel.append("with l_rank as (")
					.append("select mpl.M_PriceList_ID, mplv.M_PriceList_Version_ID, mplv.ValidFrom, mpp.M_ProductPrice_ID, ")
					.append("rank() over (partition by mpl.M_PriceList_ID order by mplv.ValidFrom desc, mplv.M_PriceList_Version_ID desc) as idxRank ")
					.append("from M_PriceList mpl join M_PriceList_Version mplv on (mpl.M_PriceList_ID=mplv.M_PriceList_ID) ")
					.append("join M_ProductPrice mpp on (mplv.M_PriceList_Version_ID=mpp.M_PriceList_Version_ID and mplv.IsActive='Y') ")
					.append("where mpl.M_PriceList_ID=? ")
					.append("and mplv.ValidFrom<=? ")
					.append("and mpp.M_Product_ID=?) ")
					.append("select lr.*, rml.RDO_MLM_Level_ID, rml.Line, rml.LevelPercentage ")
					.append("from l_rank lr join RDO_MLM_Level rml on (lr.M_ProductPrice_ID=rml.M_ProductPrice_ID) ")
					.append("where lr.idxRank=1 ")
					.append("and rml.Line<=? ")
					.append("order by rml.Line asc");
				
				PreparedStatement pstmt2 = null;
				ResultSet rs2 = null;
				try {
					pstmt2 = DB.prepareStatement(sqlLevel.toString(), get_TrxName());
					pstmt2.setInt(1, rs.getInt("M_PriceList_ID"));
					pstmt2.setTimestamp(2, rs.getTimestamp("DateOrdered"));
					pstmt2.setInt(3, rs.getInt("M_Product_ID"));
					pstmt2.setInt(4, p_maxlevel);
					rs2 = pstmt2.executeQuery();
					int C_BPartner_ID = rs.getInt("C_BPartner_ID");
					int C_BP_Group_ID = 0;
					X_RDO_CommissionAmt commAmt = null;					
					while (rs2.next()) {
						if (idxcount==1) {
							comm.set_ValueOfColumn("AD_Client_ID", m_AD_Client_ID);
							comm.setAD_Org_ID(m_AD_Org_ID);
							comm.setDateFrom(p_DateFrom);
							comm.setDateTo(p_DateTo);
							comm.setDescription("Automatically Generated by System - Commission " + rs.getString("ProductCategoryValue"));
							comm.setGrandTotal(Env.ZERO);
							comm.setDocStatus(X_RDO_Commission.DOCSTATUS_Drafted);
							comm.setDocAction(X_RDO_Commission.DOCACTION_Complete);
							comm.setProcessed(false);
							comm.saveEx(get_TrxName());
							RDO_Commission_ID = comm.getRDO_Commission_ID();
							msg = comm.getDocumentNo();
						}
						
						if (C_BPartner_ID>0) {
							C_BPartner_ID = DB.getSQLValue(get_TrxName(), "select Ref_BPartner_ID from C_BPartner where C_BPartner_ID=?", C_BPartner_ID);
							if (C_BPartner_ID<=0) {
								log.warning("Skip = " + Integer.valueOf(idxcount));
								idxcount++;
								continue;
							} else {
								C_BP_Group_ID = new MBPartner(getCtx(), C_BPartner_ID, get_TrxName()).getC_BP_Group_ID();
								if (C_BP_Group_ID==p_BP_Group_ID_Team && rs2.getInt("Line")>1) {
									log.warning("Skip Team = " + Integer.valueOf(idxcount));
									idxcount++;
									continue;									
								} else {
									MBPartner bp = new MBPartner(getCtx(), C_BPartner_ID, get_TrxName());
									if (rs2.getInt("Line")>bp.getShareOfCustomer()) {
										log.warning("Skip Level = " + Integer.valueOf(idxcount));
										idxcount++;
										continue;																			
									}
								}
							}
						} else {
							log.warning("Skip = " + Integer.valueOf(idxcount));
							idxcount++;
							continue;							
						}
						
						int RDO_CommissionAmt_ID = DB.getSQLValue(get_TrxName(), "select RDO_CommissionAmt_ID from RDO_CommissionAmt where RDO_Commission_ID=? and C_BPartner_ID=?", RDO_Commission_ID, C_BPartner_ID);
						if (RDO_CommissionAmt_ID<0) {
							commAmt = new X_RDO_CommissionAmt(getCtx(), 0, get_TrxName());
							commAmt.setAD_Org_ID(m_AD_Org_ID);
							commAmt.setRDO_Commission_ID(RDO_Commission_ID);
							commAmt.setC_BPartner_ID(C_BPartner_ID);
							commAmt.setLineNetAmt(Env.ZERO);
						}
						else
							commAmt = new X_RDO_CommissionAmt(getCtx(), RDO_CommissionAmt_ID, get_TrxName());
						
						BigDecimal levelPercentage = rs2.getBigDecimal("LevelPercentage");
						
						/* Get Level 2 for Team */
						if (C_BP_Group_ID==p_BP_Group_ID_Team) {
							StringBuffer sqlLevel2 = new StringBuffer();
							sqlLevel2.append("with l_rank as (")
								.append("select mpl.M_PriceList_ID, mplv.M_PriceList_Version_ID, mplv.ValidFrom, mpp.M_ProductPrice_ID, ")
								.append("rank() over (partition by mpl.M_PriceList_ID order by mplv.ValidFrom desc, mplv.M_PriceList_Version_ID desc) as idxRank ")
								.append("from M_PriceList mpl join M_PriceList_Version mplv on (mpl.M_PriceList_ID=mplv.M_PriceList_ID) ")
								.append("join M_ProductPrice mpp on (mplv.M_PriceList_Version_ID=mpp.M_PriceList_Version_ID and mplv.IsActive='Y') ")
								.append("where mpl.M_PriceList_ID=? ")
								.append("and mplv.ValidFrom<=? ")
								.append("and mpp.M_Product_ID=?) ")
								.append("select rml.LevelPercentage ")
								.append("from l_rank lr join RDO_MLM_Level rml on (lr.M_ProductPrice_ID=rml.M_ProductPrice_ID) ")
								.append("where lr.idxRank=1 ")
								.append("and rml.Line=2 ")
								.append("order by rml.Line asc");
							
							levelPercentage = DB.getSQLValueBD(get_TrxName(), sqlLevel2.toString(), rs.getInt("M_PriceList_ID"), rs.getTimestamp("DateOrdered"), rs.getInt("M_Product_ID"));
						}
						/* End Get Level 2 for Team */
						
						BigDecimal PriceActual = rs.getBigDecimal("PriceActual");
						BigDecimal TaxRate = rs.getBigDecimal("Rate");
						//BigDecimal PriceCommission = TaxRate.compareTo(Env.ZERO)>0 ? PriceActual.divide(Env.ONE.add(TaxRate.divide(Env.ONEHUNDRED, 2, RoundingMode.HALF_UP))) : PriceActual;
						BigDecimal TaxRatePct = TaxRate.divide(Env.ONEHUNDRED, 2, RoundingMode.HALF_UP);
						BigDecimal PriceCommission = TaxRate.compareTo(Env.ZERO)>0 ? PriceActual.divide(Env.ONE.add(TaxRatePct), 2, RoundingMode.HALF_UP) : PriceActual;
						BigDecimal Amt = (PriceCommission.multiply(levelPercentage.divide(Env.ONEHUNDRED))).setScale(2, RoundingMode.HALF_UP);
						commAmt.setLineNetAmt(commAmt.getLineNetAmt().add(Amt));
						commAmt.saveEx(get_TrxName());
						
						/* Check Commission Detail */
						StringBuffer sqlDetail = new StringBuffer();
						sqlDetail.append("select count(rcd.RDO_CommissionDetail_ID) ")
							.append("from RDO_CommissionDetail rcd join RDO_CommissionAmt rca on (rcd.RDO_CommissionAmt_ID=rca.RDO_CommissionAmt_ID) ")
							.append("join RDO_Commission rc on (rca.RDO_Commission_ID=rc.RDO_Commission_ID and rc.IsActive='Y') ")
							.append("where (rcd.C_Order_ID, rcd.RDO_MLM_Level_ID)=(?, ?)");
						int vcountdetail = DB.getSQLValue(get_TrxName(), sqlDetail.toString(), rs.getInt("C_Order_ID"), rs2.getInt("RDO_MLM_Level_ID"));
						
						if (vcountdetail==0) {
							X_RDO_CommissionDetail commDetail = new X_RDO_CommissionDetail(getCtx(), 0, get_TrxName());
							commDetail.setAD_Org_ID(m_AD_Org_ID);
							commDetail.setRDO_CommissionAmt_ID(commAmt.getRDO_CommissionAmt_ID());
							commDetail.setC_Order_ID(rs.getInt("C_Order_ID"));
							commDetail.setC_OrderLine_ID(rs.getInt("C_OrderLine_ID"));
							commDetail.setRDO_MLM_Level_ID(rs2.getInt("RDO_MLM_Level_ID"));
							commDetail.setLevelPercentage(levelPercentage);
							commDetail.setAmount(Amt);
							commDetail.saveEx(get_TrxName());
							comm.setGrandTotal(comm.getGrandTotal().add(Amt));
						
							/* for Upgrade */
							if (rs.getString("IsUpgrade").equals("Y")) {
								StringBuffer sqlUpgrade = new StringBuffer();
								sqlUpgrade.append("select coalesce(Amount, 0) ")
									.append("from RDO_Commission_v ")
									.append("where (C_BPartner_ID, C_Order_ID)=(?, ?) ")
									.append("and IsPaid='Y' ");
								BigDecimal paidAmt = DB.getSQLValueBD(get_TrxName(), sqlUpgrade.toString(), C_BPartner_ID, rs.getInt("Ref_Order_ID")).negate();
								
								commDetail = new X_RDO_CommissionDetail(getCtx(), 0, get_TrxName());
								commDetail.setAD_Org_ID(m_AD_Org_ID);
								commDetail.setRDO_CommissionAmt_ID(commAmt.getRDO_CommissionAmt_ID());
								commDetail.setC_Order_ID(rs.getInt("C_Order_ID"));
								commDetail.setC_OrderLine_ID(rs.getInt("C_OrderLine_ID"));
								commDetail.setRDO_MLM_Level_ID(rs2.getInt("RDO_MLM_Level_ID"));
								commDetail.setLevelPercentage(levelPercentage);
								commDetail.setAmount(paidAmt);
								commDetail.saveEx(get_TrxName());
								
								commAmt.setLineNetAmt(commAmt.getLineNetAmt().add(paidAmt));
								commAmt.saveEx(get_TrxName());
								
								comm.setGrandTotal(comm.getGrandTotal().add(paidAmt));
							}
							/* End for Upgrade */
						}
						
						comm.saveEx(get_TrxName());
																			
						log.warning("idxcount = " + Integer.toString(idxcount));
						idxcount++;
					}					
				} catch (Exception e) {
					log.warning("Cannot Calculate Commission - " + e.toString());
					rollback();
					return "Cannot Calculate Commission - " + e.toString();
				} finally {
					DB.close(rs2, pstmt2);
					pstmt2 = null;
					rs2 = null;
				}
			}
			
			/* Delete RDO_CommissionAmt with No Detail */
			StringBuffer sqlDelete = new StringBuffer();
			sqlDelete.append("delete from RDO_CommissionAmt rca ")
				.append("where rca.RDO_Commission_ID=? ")
				.append("and (select count(1) from RDO_CommissionDetail rcd where rcd.RDO_CommissionAmt_ID=rca.RDO_CommissionAmt_ID)=0");
			int vcountdelete = DB.executeUpdate(sqlDelete.toString(), RDO_Commission_ID, get_TrxName());
			
			/* Update RDO_CommissionAmt with Amt from Detail */
			StringBuffer sqlUpdate = new StringBuffer();
			sqlUpdate.append("update RDO_CommissionAmt rca ")
				.append("set LineNetAmt=(select coalesce(sum(rcd.Amount),0) from RDO_CommissionDetail rcd where rcd.RDO_CommissionAmt_ID=rca.RDO_CommissionAmt_ID) ")
				.append("where rca.RDO_Commission_ID=?");
			int vcountupdate = DB.executeUpdate(sqlUpdate.toString(), RDO_Commission_ID, get_TrxName());
			
		} catch (Exception e) {
			log.warning("Cannot Calculate Commission - " + e.toString());
			rollback();
			return "Cannot Calculate Commission" + e.toString();
		} finally {
			DB.close(rs, pstmt);
			pstmt = null;
			rs = null;
		}
		
		msg = "Process Completed - Generated Commission = " + msg;
		return msg;
	}

}
